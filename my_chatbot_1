# app.py
import os
from flask import Flask, request, jsonify, send_from_directory
from dotenv import load_dotenv
from openai import OpenAI        # or: import openai if you're using the older client
import logging
from flask_cors import CORS

# 1) Load environment variables from .env (if present)
load_dotenv()  # safe: does nothing if .env doesn't exist

# 2) Read the OpenAI API key from environment
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
if not OPENAI_API_KEY:
    raise RuntimeError("OPENAI_API_KEY not set. Add it to .env or configure your environment variables.")

# 3) Create OpenAI client
client = OpenAI(api_key=OPENAI_API_KEY)  # new-style client
# If you use the legacy package:
# import openai
# openai.api_key = OPENAI_API_KEY

# 4) Create Flask app and enable CORS for dev
app = Flask(__name__, static_folder="static", static_url_path="/static")
CORS(app)  # allow browser to call the endpoint during development; tighten in prod

# 5) Basic logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# 6) Optional: secret for session or forms
app.config["SECRET_KEY"] = os.getenv("SECRET_KEY", "change-this-in-prod")

# 7) Serve the index.html (optional)
@app.route("/")
def index():
    return send_from_directory("static", "index.html")

# 8) Chat endpoint
@app.route("/chat", methods=["POST"])
def chat():
    payload = request.get_json(force=True)
    messages = payload.get("messages")
    if not messages:
        return jsonify({"error": "messages field required"}), 400

    try:
        # Send request to OpenAI (chat completion / responses - shape depends on client)
        resp = client.chat.completions.create(
            model=os.getenv("OPENAI_MODEL", "gpt-4o"),
            messages=messages,
            temperature=float(os.getenv("OPENAI_TEMP", "0.7")),
            max_tokens=int(os.getenv("OPENAI_MAX_TOKENS", "800")),
        )
        # Extract assistant reply
        assistant_text = resp.choices[0].message.content
        logger.info("OpenAI replied with %d tokens", len(assistant_text))
        return jsonify({"reply": assistant_text})
    except Exception as e:
        logger.exception("OpenAI request failed")
        return jsonify({"error": str(e)}), 500

# 9) Run locally
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 5000)), debug=(os.getenv("FLASK_DEBUG") == "1"))
